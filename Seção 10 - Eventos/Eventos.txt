O que são eventos?
	São ações atreladas a algum comportamento do usuário, como click, alguma tecla, movimentos da tela e do mouse.
	Podemos inserir lógica quando estes eventos ocorrem.
	Podemos disparar eventos em certos elementos. 
	Esta técnica é conhecida como event handler.

Como acionar um evento
	Primeiramente precisamos selecionar o elemento que vai disparar o evento.
	Depois, vamos ativar um método chamado "addEventListener".
	Nele, declaramos qual o tipo de evento, e por meio de callback definimos o que acontece.
	Exemplo:
		const btn = document.querySelector("#my-button");
		btn.addEventListener("click", function () {
		  console.log("Clicou aqui");
		});
	
Removendo Eventos
	Para remover eventos, utilizamos o "removeEventListener"
	Passamos o evento que queremos remover como argumento.
	Exemplo:
		thirdBtn.addEventListener("click", () =>{
			console.log("Evento removido");
			secondBtn.removeEventListener("click", imprimirMensagem)
		})
		
O objeto do evento
	Todo evento possui um argumento especial, que contém informações do mesmo.
	Geralmente chamado "event" ou "e".
	Exemplo:
		const myTitle = document.querySelector("#my-title")
		myTitle.addEventListener("click", (event) =>{
		  console.log(event);
		  console.log(event.offsetX);
		  console.log(event.pointerType);
		  console.log(event.target);
		})
		
Propagação
	Quando um elemento de um evento não é claramente definido, pode haver propagação.
	Ou seja, um outro elemento ativar o evento.
	Para resolver este problema, temos o método "stopPropagation".
	Para desativar o fator do elemento "pai" ativar o elemento filho também, devemos utilizar este método.
	Exemplo:
		const containerBtn = document.querySelector("#btn-container");
		const btnInsideContainer = document.querySelector("#div-btn"); --> está dentro do btn-container
		
		containerBtn.addEventListener("click", () => {
		  console.log("Evento 1");
		});

		btnInsideContainer.addEventListener("click", (e) => {
		  e.stopPropagation();
		  console.log("Evento 2");
		});

Evento padrão
	Muitos elementos tem ações padrões no HTML, como os links que nos levam a outras páginas.
	Podemos remover isso com o método preventDefault.
	Exemplo:
		const a = document.querySelector("a");
		a.addEventListener("click", (e) =>{
		  e.preventDefault()
		  console.log("Não alterou a página");
		})
		
Eventos de tecla
	Os eventos de tecla mapeiam as ações no teclado.
	Temos a disposição keyup e keydown.
	keyup ativa quando a tecla é solta.
	keydown ativa quando a tecla é pressionada.
	O elemento "e.key" mostra a tecla que foi solta ou pressionada.
	Exemplo:
		document.addEventListener("keyup", (e) => {
		  console.log("soltou a tecla " + e.key); -->
		})

		document.addEventListener("keydown", (e) => {
		  console.log("soltou a tecla " + e.key);
		})

Outros Eventos de Mouse 
	O mouse pode ativar outros eventos.
	mousedown - ativa quando pressiona o botão do mouse.
	mouseup - ativa quando solta o botão do mouse.
	dblclick - ativa quando dá double click.
	Exemplo:
		const mouseEvents = document.querySelector("#mouse");
		mouseEvents.addEventListener("mousedown", () => {
		  console.log("Pressionou um botão");
		});

		mouseEvents.addEventListener("mouseup", () => {
		  console.log("Soltou um botão");
		});

		mouseEvents.addEventListener("dblclick", () => {
		  console.log("Clique duplo");
		});

Movimento do Mouse
	É possível ativar um evento a partir da movimentação do mouse.
	O evento é o mousemove.
	Com o objeto de evento, podemos detectar a posição do ponteiro do mouse.
	Exemplo:
		document.addEventListener("mousemove", (e) => {
		  console.log(`No eixo X: ${e.x}`);
		  console.log(`No eixo Y: ${e.y}`);
		});

Eventos por Scroll
	Podemos também adicionar um evento ao scroll do mouse/página.
	Isso é feito pelo evento "scroll".
	Podemos determinar que algo aconteça após chegar numa posição escolhida da tela.
	Exemplo:
		window.addEventListener("scroll", (e) => {
		  if (window.pageYOffset > 20) {
			console.log("Passamos de 2000px");
		  }
		});

Eventos por Foco
	O evento focus é disparado quando focamos em um elemtno.
	Já o blur, é quando perde o foco do elemento.
	Estes são comuns em inputs.
	Exemplos:
		const input = document.querySelector("#my-input");
		input.addEventListener("focus", (e) => {
		  console.log("Entrou no input"); --> valida no console quando o usuário entra no input.
		});

		input.addEventListener("blur", (e) => {
		  console.log("Saiu do input"); --> valida no console quando o usuário sai do input.
		});

Evento de Carregamento de página
	Podemos adicionar um evento ao carregar a página, que é o load.
	E quando o usuário sai da página, que é o beforeunload.
	Não é recomendado utilizar, a não ser que esteja fazendo uma página de formulário.
	Exemplo:
		window.addEventListener("load", ()=>{
		  console.log("A página carregou");
		})

Técnica de debounce
	O debounce é uma técnica utilizada para fazer um evento disparar menos vezes.
	Isso poupa memória do usuário, pois talvez nem sempre o evento seja necessário.
	Exemplo:
		const debounce = (f, delay) => {
		  let timeout;
		  return (...arguments) => { 
			if(timeout){
			  clearTimeout(timeout);
			}
			timeout = setTimeout(() =>{
			  f.apply(arguments);
			},delay);
		  }
		}

		window.addEventListener("mousemove",debounce(() =>{
		  console.log("Executando a cada 400ms");
		},400))