O que é JS ES6+? --> Seção toda praticamente relembrando recursos já vistos
	São as novas versões do Javascript.
	Cada uma delas trouxe recursos que ajudam muito os devs.
	Estes recursos são essenciais para trabalhar com frameworks e libs, como React, Vue e Angular.
	Agilizam muito o desenvolvimento com JS.
	
===== Seção toda praticamente relembrando recursos já vistos =====
	
Variáveis com let e const 
	Temos duas novas formas de declarar variáveis a partir do ES6+, que são let e const.
	let é uma forma de atribuir valor, e poder modificar depois.
	Já const, declara uma constante, e podemos atribuir um valor e não alterar.
	O grande diferencial são os escopos em bloco.

Filter
	O filter é um método de array para filtrar dados.
	O filtro é determinado por nós, por meio de uma função.
	Resultado em um array com apenas os elementos que precisamos.
	Nessas verões mais novas de JS, temos vários métodos de array importantes como este.
	Exemplo:
		const users = [
			{name:"User 1", available: true},
			{name:"User 2", available: false},
			{name:"User 3", available: true},
			{name:"User 4", available: false},
			{name:"User 5", available: true},
			{name:"User 6", available: false}
		]
		const availableUsers = users.filter((user) => user.available);
Map
	O map é um método de array e percorre todos os elementos dele.
	É utilizado para modificar o array de origem.
	O filter remove elementos desnecessários, e o map altera os que precisamos.
	Exemplo:
		const products = [
		  { name: "Camisa", price: 10.99, category: "Roupas" },
		  { name: "Chaleira", price: 149.99, category: "Eletro" },
		  { name: "Fogão", price: 300.99, category: "Eletro" },
		  { name: "Calça", price: 50.99, category: "Roupas" },
		  { name: "Micro", price: 120.99, category: "Eletro" },
		];

		products.map((products) => {
			if(products.category === "Roupas"){
				products.onSale = true;
			}
		})

Template Literals
	Permite a impressão de variáveis em um texto.
	É escrito entre crases, com a variável inserida em uma chaves com um cifrão na frente.
	Exemplo:
		let a = 4;
		let name = "Rosane"
		console.log(`O valor de a é ${a} e a string é ${name}`);

Destructuring
	O destructuring desestrutura dados complexos em várias variáveis.
	Podemos utilizar em arrays e objetos.
	Muitas variáveis podem ser criadas em uma única linha.
	Exemplo:
		const fruits = ["Maçã","Mamão","Laranja"];
		const [f1,f2,f3] = fruits;

		const productDetails = {
			name: "Mouse",
			price: 30,
			category: "Periferico",
			color:"cinza"
		}
		const {name: productName, price, category, color} = productDetails;
		console.log(`O nome do produto é ${productName} e ele custa R$${price}`);

Spread operator
	O spread pode ser utilizado em arrays e objetos.
	Utilizamos para inserir novos valores em um array ou objeto.
	É um recurso que pode unir dois arrays, por exemplo.
	Exemplo:
		const a1 = [1,2,3];
		const a2 = [4,5,6];
		const a3 = [...a1,...a2]
		console.log(a3);

Classes
	São recursos fundamentais para programar orientado a objetos.
	Temos acesso a recursos importantes, como: constructor, propriedades, métodos.
	Antes, as classes em JS eram criadas com constructor functions.
	Exemplo:
		class Product{
		constructor(name,price){
			this.name = name;
			this.price = price;
		}
		discount(discount){
			return this.price * ((100 - discount) / 100);
		}
	}
	const shirt = new Product("Camisa",100); // Camisa de 100 reais
	console.log(shirt);
	console.log(shirt.discount(20)); // Camisa com 20% de desconto = 80 reais.
	
Herança
	Herança é o recurso que nos dá a possibilidade de uma classe herdar métodos e propriedades de outra.
	A palavra "extends" determina qual classe será herdada.
	Para enviar propriedades para a classe pai, utilizamos "super".