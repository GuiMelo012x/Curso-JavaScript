===== Seção 5 - Arrays e Objetos  ====
Arrays
	São listas
	Podemos inserir valores de qualquer tipo de dado.
	Os valores são inseridos entre [].
	Cada valor é separado do outro por uma vírgula.
	Um array é considerado objeto.
	
Propriedades
	Propriedades são como informações de um objeto.
	Os arrays tem propriedades, assim como outros tipos de dados.
	As propriedades podem ser acessadas por notação de ponto ou colchetes:
		dado.prop
	Exemplo:
		numbers.lenght --> variavel com o tamanho do array.
	
Métodos
	Métodos são como funções, acessamos com notação de ponto e utilizamos () para invocar.
	Um importante conceito da POO: Objetos são compostos por métodos e propriedades.
	Como muitos dados são objetos em JS, temos métodos e propriedades neles.
	Exemplo:
		const numbers[1,2,3]
		const otherNumbers = [4,5,6];
		const allNumbers = numbers.concat(otherNumbers) --> junta os 2 arrays ([1,2,3,4,5,6])
		
		const text ="Algum texto"
		console.log(text.toLowerCase(text)) --> transforma o texto em lower case.
		console.log(text.indexOf("g")) --> pega o número index do "g".

Objetos	
	Em JS, temos um tipo de dado que é o objeto, mas seu nome técnico é object literals.
	Isso porque o objeto vem da Orientação a Objetos, com recursos como herança, instância.
	Já o literals possui apenas propriedades e métodos que nós mesmos os criamos.
	O objeto fica em um bloco de {}.
	Exemplo:
		const person = {
		name: "Edna ",
		age: 35,
		job: "Programadora"
	}
	Podemos copiar todas as propriedades de um objeto para outro com o método assign.
	O objeto literal é uma instância de um objeto, chamada Object.
	Um objeto ou array criado com const pode ter seus elementos e propriedades modificados.
	Exemplo:
		Object.assign(obj2,obj); --> o primeiro é quem recebe, o segundo é de quem pega.

Criando e deletando propriedades
	Para adicionar uma nova propriedade a um objeto, utilizamos a notação de ponto e atribuímos um valor.
	Já para excluir, vamos utilizar o operador delete na propriedade alvo.
	Exemplo:
		const dog = {
		name: "Amancio",
		age: 5,
		breed: "Maltês",
		}
	dog.color = "white"; --> adiciona a cor.
	delete dog.age; --> remove a idade.

Diferença entre arrays e objetos
	Os arrays são utilizados como lista de itens, geralmente todos possuem o mesmo tipo.
	Já os objetos são utilizados para descrever um item, contendo as suas informações e propriedades, que podem possuir diferentes tipos de dados.
	Podemos ter também um array de objetos, e isso é muito utilizado.
	Exemplo:
		const dog = { --> objeto 1.
		name: "Amancio",
		age: 5,
		breed: "Maltês",
		}
		
		const cat = { --> objeto 2.
			name: "Texeira",
			age: 5,
			breed: "Laranja",
		}
		const bixin = [dog,cat]; --> array de objetos.

Conhecendo melhor o objeto
	Podemos verificar as propriedades de um objeto pelo método "keys" de Object.
	Com o método "entries", recebemos arrays dos nomes das propriedades com seus valores.
	
Mutação
	Ocorre quando criamos um objeto a partir de outro.
	Este novo objeto não é novo, e sim uma referência do primeiro.
	As mudanças dele, podem afetar a cópia e vice-versa.
	Exemplo:
		const a = {
		name:"Cleonice "
		}
		const b = a;
		a.age = 70; --> adiciona em b também.
		b delete name; --> deleta em a também.

Loops em arrays
	É muito comum percorrer os arrays através de estruturas de repetição.
	Isso serve para utilizar o resultado de cada um dos elementos de forma simples, sem repetição de código.
	Exemplo:
		for (let i = 0; i < users.length; i++) {
			console.log(`Listando o usuário: ${users[i]}`);
		}
		
Push e Pop
	Os métodos de array são muito úteis para manipular os arrays, ou seja, alterar os seus valores de alguma forma.
	Com o push, adicionamos um item ao fim do array.
	Com o pop, removemos um elemento no fim do array.
	Exemplo:
		nomes.push("Emanuelle");
		nomes.push("George");
		nomes.pop();
			const itemRemovido = nomes.pop();
			console.log(itemRemovido); -->  mostra quem foi o item removido.
		
Shift e Unshift
	Ao contrário de pop e push, temos shift e unshift.
	O método shift remove o primeiro elemento do array.
	Já o método unshift, adiciona itens ao início do array.
	Exemplo:
		nomes.shift(); 
		nomes.unshift("Munique");
		nomes.unshift("Alzira","Gutemberg","Pablo");

IndexOf e lastIndexOf
	O método "indexOf" nos permite encontrar o índice de um elemento, que passamos como argumento para o método.
	Já o "lastIndexOf" é utilizado quando há repetições de elementos e precisamos do índice da última ocorrência.
	Exemplo:
		nomes.indexOf("Munique");
		nomes.lastIndexOf("Dionísio");
		nomes.indexOf("inexistente"); --> retorna -1

Slice
	O método slice é utilizado para extrair um array menor de um array maior.
	O intervalo de elementos é determinado pelos parâmetros, que são: o índice de início e o índice de fim.
	O último elemento é ignorado, se quisermos ele, devemos somar 1 ao índice final.
	Exemplo:
		const frutas = ["Banana","Morango","Abacaxi","Maçã","Cereja","Melancia"]
		const subFrutas = frutas.slice(2,5); --> Pega os valores entre [2] e [5], excluindo o [5]. Se quiser o [5], é necessário alterar para 6

ForEach
	É como uma estrutura de for ou while, porém é um método.
	Ele percorre cada um dos elementos do array.
	Exemplo:
		frutas.forEach((numero) => {
			console.log(`A fruta é ${numero}`)
		})

Includes
	O método includes verifica se o array tem um elemento.
	Utilizamos no array e como argumento colocamos o elemento que buscamos.
	Exemplo:
		console.log(frutas.includes("Maçã")) --> true
		console.log(frutas.includes("maçã")) --> false, pois é case sensitive
		console.log(frutas.includes("Uva")) --> false

Reverse
	O método reverse inverte os elementos de um array.
	Este método modifica o array original, então é necessário criar uma cópia, caso queira alterar.
	Exemplo:
		const numberArray = [1,2,3,4,5];
		numberArray.reverse();
		console.log("Array reverso - " + numberArray); --> [5,4,3,2,1]

Métodos de String
	As strings também são objetos, ou seja, tem métodos e propriedades.
	Alguns são muito semelhantes aos de array.
	Podemos utilizar length em uma string ou em um array.
	Podemos também acessar cada caractere pelo seu índice.
	
Trim
	O trim remove tudo que não é texto em uma string, como caracteres especiais e espaço em branco.
	Um método interessante para utilizar em sanitização de dados.
	O método não modifica o texto original.
	Exemplo:
		const testeTrim= "         testando \n  ";
		console.log(testeTrim.trim());

Padstart
	O método padstart insere um texto no começo da string.
	O texto pode ser repetido, de acordo com o segundo argumento ao método, ele determina o máximo de caracteres do texto alvo.
	Exemplo:
		const testePadstart = "1";
		const newNumber = testePadstart.padStart(4,"0");
		console.log(newNumber); --> 0001
		padStart(4,"oi"); --> "oio1"
		
		const newNumber2 = testePadstart.padEnd(4,"0");
		console.log(newNumber2); --> 1000
		
Split
	Split divide uma string em um array, havendo uma transformação de dados.
	Cada elemento será determinado por um separador em comum.
	Os mais utilizados são: ponto e vírgula, vírgula, espaço.
	Exemplo:
		const testeSplit = "O rato roeu a roupa do rei de Roma"
		const arraySplit = testeSplit.split(" "); --> a cada espaço, ele divide em um elemento.
		console.log(arraySplit); --> 'O', 'rato', 'roeu', 'a', 'roupa', 'do', 'rei', 'de', 'Roma'

Join
	Join une um array em uma string.
	Podemos colocar um separador também, para formatar a string.
	Exemplo:
		const arrayJoin = arraySplit.join("-");
		console.log(arrayJoin); --> junta a frase tudo de novo, e a cada elemento, adiciona um "-".
		const fraseDeCompra = `Precisamos comprar estas frutas: ${frutas.join(", ")}.` --> junta todos os elementos de um array e adiciona ", " a cada fim de elemento.

Repeat
	O método repeat repete um texto n vezes.
	Onde n é o número que colocamos como seu argumento.
	Exemplo:
		console.log(palavra.repeat(5));

Rest operator
	É caracterizado pelo símbolo "...".
	Podemos utilizá-lo para receber indefinidos argumentos em uma função.
	Assim, não precisamos declarar exatamente o que vamos receber, deixando a função mais ampla.
	Faz com que a função não tenha um número exato de parâmetros a ser recebidos.
	Exemplo:
		const somaInfinita = (...args) =>{ 
		[...]		
		console.log(somaInfinita(1,2,3));
		console.log(somaInfinita(1,2,3,5,6,7,21,5)); --> aceita ambos, pois não tem um número exato de parâmetros a ser recebido.

For Of
	É uma estrutura de repetição semelhante ao for, porém mais simples. 
	O número de repetição é baseado no array utilizado.
	Podemos nos referir aos elementos sem precisar acessar o índice deles.
	Exemplo:
		const somaInfinita2 = (...args) => {
			let total = 0

			for(num of args){
				total+= num
			}
		}
		
Destructuring em Objetos
	O destructuring é uma funcionalidade que nos permite desestruturar algum dado.
	No caso dos objetos, é possível criar variáveis a partir das suas propriedades, com uma simples sintaxe.
	Exemplo:
		const userDetails = {
			firstName: "Jane",
			lastName: "Amorim",
			job: "Programadora",
		}

		const {firstName, lastName, job} = userDetails; --> para criar variáveis.
		const {firstName: primeiroNome} = userDetails; --> para renomear um elemento.
		
Destructuring em Arrays
	Também pode ser utilizado para desestruturar um array em variáveis.
	Ao invés de chaves, serão utilizados colchetes, e não temos nome das chaves.
	É muito mais utilizado em objetos.
	Exemplo:
		const myList = ["Avião", "Submarino", "Carro"];
		const[veiculoA, veiculoB, veiculoC] = myList;
		console.log(veiculoA, veiculoB, veiculoC);
		
Conhecendo o JSON
	O JSON, JavaScript Object Notation, é um dado em formato de texto.
	Utilizamos para comunicação entre API e front-end.
	Sua formatação é rigorosa, se for mal feita, o dado é invalidado e não conseguimos comunicação.
	Seu formato lembra os object literals.
	Regras: apenas aspas duplas e não aceita comentários.
	Na maioria das vezes, vamos precisar converter objetos para JSON, ou um JSON para um objeto JavaScript válido.
	Utilizamos o objeto JSON e os métodos stringify e parse.
	Exemplo: 
		Criando um JSON:
			const myJSON ='{"name": "Cristiano", "age": 68,"skills": ["PHP","Python","Java"]}'
		JSON para Objeto: 
			const myObject = JSON.parse(myJSON);
		Objeto para JSON:
			const myNewJSON = JSON.stringify(myObject);
		