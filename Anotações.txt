===== Seção 2 - Tipos de Dados e Operadores  ====

O que são tipos de dados?
	É a forma de classificar um dado.
	Temos como dado: "Guilherme", 15,true,[].
		String, number, boolean, array, empty values, object.
		Não há distinção entre int, float, double. Todo número é "Number".


Number
	Number é o tipo de dado para valores numéricos.
	Em JS, todos os números são considerados Number, sejam eles inteiros, pontos flutuantes ou negativos..
	O operador typeof exibe o tipo de dado.
	Exemplo:
		console.log("2");
		console.log(typeof(2));
		console.log(typeof 2);
		console.log(typeof 5.14);
		console.log(typeof -40);
	Todos vão dar "numbers".
	
Aritmética com Numbers
	Podemos realizar operações aritméticas na programação.
	Operadores como +,-,*,/, podem ser utilizados.
	A ordem matemática é respeitada na programação.
	Exemplo:
		console.log(5+(4*12)); --> ele faz primeiro a multiplicação, e depois a adição.

Special Numbers
	São dados considerados como números, mas não funcionam como eles.
	Eles são:
		Infinity
		-Infinity
		NaN (Not a Number)
	Algumas operações podem resultar nestes valores.
	Exemplo:
		console.log(2* "oi");

Strings
	Strings são textos, e em JS temos três formas de criar dados de texto.
	Aspas simples, aspas duplas e crases.
	O padrão é utilizar as aspas duplas.
	O efeito final é o mesmo, mas cada um destes recursos tem particularidades.
	Uma string deve sempre começar e terminar com o mesmo caractere, seja ele ",' ou `.
	Há algumas combinações de caracteres que possuem efeitos nas strings, como o \n, que pula uma linha de texto.
	Exemplo:
		console.log("Texto em \nDuas linhas");
		
Concatenação
	É o recurso que une dois ou mais textos.
	O operador da concatenação é o +.
	Exemplo:
		console.log("Recife " + "-" + " Pernambuco")

Interpolação (Template Strings)
	A interpolação é um recurso semelhante a concatenação, mas nos possibilita escrever tudo na mesma string.
	Esta deve ser escrita `entre crases`.
	Podemos executar código JavasCript com ${algum código};
	Exemplo:
		console.log(`A soma de 2 + 2 é: ${2+2} e é um cálculo fácil`);

Booleans
	Os booleans possuem apenas dois valores: true ou false.
	Qualquer comparação, utilizando os sinais >,<,==, resulta em um booleano.
	É muito importante para as estruturas de condição e repetição.
	
Comparações
	As comparações que podemos utilizar são:
		Maior e menor: > e <.
		Maior ou igual e menor ou igual: >= e <=.
		Diferente: !=.
		Igual: ==.
		Idêntico: ===. --> O idêntico checa o tipo de dado, é melhor utilizar ele do que o igual.

Comparação de Idêntico
	Os operadores === e !== funcionam como os == e !=.
	Porém também levam em consideração o tipo de dado.
	Estes operadores necessitam que o tipo e o dado sejam iguais ou diferentes.
	Devemos utilizar ao máximo estes operadores.
	Exemplo:
		console.log(9 == "9"); --> dá true.
		console.log(9 === "9");  --> dá false.
		
Operadores Lógicos
	Os operadores lógicos servem para unir duas ou mais comparações.
	O resultado final é um boolean.
	&& - AND - true apenas quando os dois lados forem verdadeiras.
	|| - OR - true quando apenas um lado é verdadeira.
	! - NOT - inverte o resultado da operação.

Tabela Verdade
	A | 	B 	| 	A AND B	 | 	A OR B	 |	 NOT A (!A) 
 False|	False	| False 	 | False 	 | True
 False| True	| False 	 | True 	 | True
 True | False 	| False 	 | True		 | False
 True | True	| True		 | True		 | False 

Empty Values
	Temos duas palavras reservadas que pertencem a este grupo de dados: undefined e null.
	Undefined geralmente é visto quando utilizamos um código que ainda não foi definido.
	Já null, costuma ser inserido pelos programadores, para determinar que não há ainda um valor.

Conversão de Tipo Automática
	Em JS, algumas operações mudam o tipo de dado, e isso acontece silenciosamente.
	Exemplos:
		5 * null --> 0
		"5" - 3 --> 2
		"5" + 1 --> 51
		"a" * "b" --> NaN
		
===== Seção 3 - Estruturas de Programação ====

Salvando Valores na Memória - Variáveis
	Podemos criar várias variáveis em sequência, desta maneira:
		let a = 5, b = 4, c = 10;
	Não podemos começar variáveis com números.
	Não podemos utilizar caracteres especiais, como @.
	As variáveis são case sensitive.
	Exemplos:
		let nome = "Guilherme"; --> let pode mudar ao longo do código.
		const idade = 22; --> const é fixo, não muda ao longo do código.

A estrutura de uma função
	Uma função é um bloco de código que pode ser reaproveitado ao longo do nosso programa.
	Chamamos ela pelo seu nome, e também o uso de parêntesses:
		funcao()
	Também podemos inserir parâmetros, que deixam a execução da função única, ex:
		soma(a,b)
	
Funções do JS: Prompt
	A função prompt recebe um dado do usuário.
	Podemos salvar este valor em uma variável.
	Exemplo:
		const age = prompt("Digite a sua idade");
		console.log(`Você tem ${age} anos`);
		
Funções do JS: Alert
	A função alert emite uma mensagem na tela por um pop up.
	Exemplo:
		const z = 4;
		alert(`o número é ${z}`)
	
Funções do JS: Math.x
	Math é um objeto, que possui diversas funções para fins matemáticos.
	Por exemplo:
		max - encontra o maior número.
		floor - arredonda o número para baixo.
		ceil - arredonda o número para cima.
	Exemplo:
		console.log(Math.max(2,5,6,1,0,4,10)); --> ele retorna o maior número.
		console.log(Math.floor(4.4)); --> ele retorna 4.
		console.log(Math.ceil(4.4)); --> ele retorna 5.
		
Funções do JS: Console.x
	O console também é um objeto, assim como Math, tem várias funções.
	A sua função principal é exibir uma mensagem de alguma categoria, na aba console.
	Exemplo:
		console.log("Hello World!"); --> mostra uma mensagem no log.
		console.error("ERRO!!!"); --> mostra uma mensagem de erro no log.
		console.warn("Aviso!"); --> mostra uma mensagem de aviso no log.
		
O que são estruturas de controle?
	Os programas são executados de cima para baixo.
	Com estas estruturas, podemos alterar o fluxo de execução.
	O caminho dependerá das condições e comparações.
	As principais são if e else.

If 
	Um bloco de código é executado, se a condição for verdadeira.
	A condição é validada por um boolean dentro da condição.
	Exemplo:
		const m = 10;
		if (m > 5){
			console.log("M é maior que 5")
		}
		let user = "Joao"
		if(user === "Joao"){
			console.log("O user é João");
		}

		user = "Maria"
		if(user !== "Joao"){
			console.log("O user não é João");
		}

Else
	O else executa quando o if não atende a sua condição.
	Ou seja, não temos um bloco de validação, apenas do que será executado.
	Se X > 2, execute ISSO, se não, execute ISTO.
	Exemplo:
		if(loggedIn){
			console.log("Está ligado")
		} else{
			console.log("Não está autenticado")
		}

		nome = "Joao";
		if(nome === "Joao"){
			console.log("O nome do usuário é João")
		}else{
			console.log("O nome do usuário não é João")
		}

Else If
	É uma estrutura intermediária do if e e do else
	É possível adicionar novas condições, como no if.
	Assim ,temos a possibilidade de criar várias validações, para resolver nosso problema.
	Exemplo:
		if(1>2){
			console.log("Teste")
		}else if(2>3){
			console.log("Teste 2")
		}else if(5 > 1){
			console.log("Agora sim");
	
O que são estruturas de repetição?
	Um bloco de código que se repete até uma condição ser satisfeita.
	Evita a repetição desnecessária do nosso código.
	Utiliza for e while.
	As sintaxes são diferentes, mas as duas chegam no mesmo resultado.
	
While
	Faz uma ação até que uma condição seja atingida.
	No bloco, definimos o fim do loop, que é a condição.
	Temos que definir um incrementador, que é quem faz a condição ser atingida.
	Exemplo:
		let i = 0;
		while( i < 5){
			console.log(`Loop ${i + 1}`);
			i++;
		}
Do While
	Parecido com o while, porém não é muito utilizado.
	Exemplo:
		let o = 5;
		do{
			console.log(`Valor de o: ${o}`)
			o--
		}while(o > 1);

For
	O for é a estrutura de repetição mais utilizada.
	Ela condensa toda a lógica em uma linha, simplificando as coisas.
	Na própria declaração, colocamos: (Incrementador, condição final, progressão)
	Exemplo:
		for(let t = 0; t<5;t++){
			console.log(`Loop ${t+1} de T com For`)
		}

		let r = 5
		for(r;r>0;r--){
			console.log(`O r está diminuindo: ${r}`)
		}

A importância da identação
	A identação é utilizado para organizar múltiplos blocos de código. 
	Utilizamos tab para criar um nível de identação.
	O código funciona sem, porém é interessante adicionar este recurso.

Forçando a saída de um loop
	Com a instrução de break, podemos sair de um loop.
	Isso pode poupar memória, pois o código será executado menos vezes.
	Exemplo:
		for(let h = 20; h > 10; h-- ){
			console.log(`O valor de h é: ${h}`)
			
			if(h === 12){
				console.log("O h é 12 e deu Break!");
				break;
			}
		}

Pulando uma execução do loop
	A palavra reservada continue, pode pular uma ou mais execuções do loop.
	É um recurso utilizado de forma semelhante ao break.
	Exemplo:
		for(let l = 1; l < 10;l++){
			if(l % 2 === 0 ){
				console.log("Número par!");
				continue;
			}
			console.log(l);
		}

Estrutura condicional: Switch
	O switch pode ser utilizado para organização de um excesso de if/else.
	Cada if seria um case.
	Para cada case, temos que adicionar um break no final, para sair do switch.
	E temos o default, que é como se fosse um "else".
	Exemplo:
		const job = "Programador"
		switch(job){
			case "Programador":
				console.log("Você é um programador!");
				break
			case "Engenheiro":
				console.log("Você é um Engenheiro!");
				break
			case "Advogado":
				console.log("Você é um Advogado!");
				break
			default:
				console.log("Profissão não encontrada.")
		}

Convenção de nome de variáveis
	Nos casos abaixo, temos da pior forma até a melhor, para declarar nome de variáveis:
		let programadorcadastrado --> ruim.
		let programador_cadastrado
		let ProgramadorCadastrado
		let programadorCadastrado --> mais utilizada.

===== Seção 4 - Funções em JavaScript  ====

O que são funções?
	São estruturas de código menores, por meio delas, podemos dividir nosso código em várias funções.
	O ideal é que cada uma tenha apenas um único objetivo.
	Isso nos faz poupar código, pois podemos reaproveitá-las.
	A linguagem tem várias funções já criadas, e nós podemos criar as nossas.

Definindo uma função
	Primeiramente utilizamos a palavra "function", para iniciar uma função.
	Depois, precisamos nomeá-la, e dar os parâmetros, que são uma espécie de configuração, entre parênteses depois do nome.
	O corpo da função ficam entre as chaves.
	Exemplo:
		function minhaFuncao(){
			console.log("testando")   
		}
		minhaFuncao();
		-----------
		const minhaFuncaoEmVariavel = function(){
			console.log("Função em variável")
		}
		minhaFuncaoEmVariavel();
		-----------
		function comParametro(txt){
			console.log(`Imprimindo ${txt}`)
		}

		comParametro("Oiiii");

Retornando Valores
	O retorno serve para processarmos um valor dentro da função e retornar para o programa.
	A palavra reservadap ara este recurso é o "return".
	Se não retornamos nada, a função tem utilidade, mas não externaliza o que acontece nela.
	Exemplo:
		function soma(n1,n2){
			return n1 + n2;
		}

		const resultado = soma(a,b);
		console.log(resultado);
		console.log(soma(c,d));

Escopo das funções
	As funções tem um escopo separado do escopo do programa.
	Este escopo faz com que variáveis de fora não funcionem dentro, é um a parte.
	Dentro das funções, podemos declarar novas variáveis, sem interferir nas já declaradas.


Escopo aninhado
	As formas de criar variáveis, let e const, nos dão a possibilidade do escopo aninhado.
	Escopo aninhado consiste em ter em qualquer bloco a declaração de variáveis separadas dos outros escopos.
	Um bloco é caracterizado por um código entre {}.
	
Arrow function
	É uma forma de criar funções, sendo caracterizado pela seta =>.
	Exemplo:
		const parOuImpar = (n) => {
			if(n%2 === 0){
				console.log("Par");
				return;
			}
			console.log("Ímpar");
		}

		parOuImpar(1);
		parOuImpar(2);
		
	Ela pode ser resumida em uma sintaxe mais resumida, sendo muito útil para funções pequenas.
	Nesta forma, são omitidas as {} e a instrução de return.
	Exemplo:
		const raizQuadrada = (x) =>{ --> Forma padrão.
			return x*x;
		}
		
		const raizQuadrada2 = (x) => x*x; --> Forma facilitada.

Argumentos opcionais
	Os argumentos/parâmetros nas funções são obrigatórios, precisamos passar todos.
	Porém, há alguns casos de funções que podem funcionar sem algum dos argumentos.
	Para resolver isso, podemos fazer uma checagem do parâmetro com um if.
	Exemplo:
		const multiplication = function(g,h){
			if (h === undefined){
				return g * 2 
			}else{
				return g*h
			}
		}

		console.log(multiplication(4,3)) --> sai no else.
		console.log(multiplication(3)) --> sai no if.

		const greeting = (name) =>{
			if(!name){
				return console.log("Insira o nome");
			}
			console.log(`Olá ${name}`)
		}

Argumentos com valor default
	Valor default é quando o argumento tem um valor prévio.
	Se for passado um novo valor, o default é substituído.
	Se não, o default é utilizado na função.
	Exemplo:
		const customGreeting = (name,greet = "Olá") =>{ --> o valor default é o "Olá" em greet.
			return `${greet},${name}!`
		}

		console.log(customGreeting("Bryan"));
		console.log(customGreeting("Claudia","Bom dia"))
		-----------------------------
		const repeatText = (text,repeat = 2) => { --> 2 é o default, se nenhum parâmetro for passado, ele repete no mínimo 2 vezes.
			for (let i = 0; i< repeat; i++){
				console.log(text);
			}
		}

		repeatText("Loop"); --> repete 2 vezes pois é o padrão default.
		repeatText("Loop",6); --> repete 6 vezes.
		
Closure
	Closure é um conjunto de funções, onde temos um reaproveitamento do escopo interno de uma função.
	Pois este escopo não pode ser acessado fora da função, já que é um bloco.
	Então, há funções internas que aproveitam o escopo, e são chamadas de closure.
	É uma função que executa outra.
	Podem servir para salvar os resultados já executados, criando uma espécie de incrementação.
	Assim, temos uma variável que executa uma função e modifica seu valor.
	Exemplo:
		function someFuncion(){
			let txt = "Alguma coisa"

			function display(){
				console.log(txt);
			}
			display();
		}

		someFuncion();
		
Recursão
	Um recurso que permite a função se autoinvocar continuamente. Criamos uma espécie de loop. 
	É interessante definir uma condição final, para parar a execução.
	Exemplo:
		function factorial(x){
			if (x===0){
				return 1
			}else{
				return x * factorial (x-1); ---> Função se autoinvocando
			}
		}